name: Docker Image Sync

on:
  push:
    paths:
      - 'images.txt'
    branches:
      - main
  workflow_dispatch:

jobs:
  sync-images:
    runs-on: ubuntu-latest
    
    steps:
      - name: 检出代码
        uses: actions/checkout@v3
      
      - name: 设置 Docker Buildx
        uses: docker/setup-buildx-action@v3
      
      - name: 登录阿里云容器镜像服务
        uses: docker/login-action@v3
        with:
          registry: ${{ secrets.DOCKER_REGISTRY }}
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}
      
      - name: 显示镜像列表
        run: |
          echo "📦 镜像同步任务开始"
          echo "======================================"
          if [ ! -f images.txt ]; then
            echo "⚠️  没有找到 images.txt 文件"
            exit 0
          fi
          
          echo "📋 需要同步的镜像列表："
          echo "---"
          cat images.txt
          echo "---"
      
      - name: 同步镜像（并行处理）
        run: |
          # 记录失败的镜像
          failed_images=()
          total_images=0
          success_images=0
          
          # 定义同步镜像的函数
          sync_image() {
            local line="$1"
            local image_name="$2"
            local tag="$3"
            local image_basename="$4"
            local target_image="$5"
            
            echo "[$(date '+%H:%M:%S')] 🚀 开始同步: $line"
            
            # 拉取源镜像
            if ! docker pull "$line" > /dev/null 2>&1; then
              echo "[$(date '+%H:%M:%S')] ❌ 拉取失败: $line"
              return 1
            fi
            
            # 标记镜像
            if ! docker tag "$line" "$target_image" > /dev/null 2>&1; then
              echo "[$(date '+%H:%M:%S')] ❌ 标记失败: $target_image"
              return 1
            fi
            
            # 推送镜像
            if ! docker push "$target_image" > /dev/null 2>&1; then
              echo "[$(date '+%H:%M:%S')] ❌ 推送失败: $target_image"
              return 1
            fi
            
            echo "[$(date '+%H:%M:%S')] ✅ 成功同步: $target_image"
            return 0
          }
          
          # 计算总镜像数
          while IFS= read -r line; do
            line=$(echo "$line" | xargs)
            if [ -n "$line" ] && [[ ! "$line" =~ ^# ]]; then
              ((total_images++))
            fi
          done < images.txt
          
          echo ""
          echo "📊 总共需要同步: $total_images 个镜像"
          echo "⚡ 开始并行处理..."
          echo ""
          
          # 并行处理镜像
          while IFS= read -r line; do
            line=$(echo "$line" | xargs)  # 去除首尾空格
            if [ -z "$line" ] || [[ "$line" =~ ^# ]]; then
              continue  # 跳过空行和注释
            fi
            
            # 提取仓库、命名空间和标签
            if [[ $line =~ (.+):([^:]+)$ ]]; then
              image_name="${BASH_REMATCH[1]}"
              tag="${BASH_REMATCH[2]}"
            else
              image_name="$line"
              tag="latest"
            fi
            
            # 提取镜像名称（去除仓库部分）
            image_basename=$(basename "$image_name")
            
            # 目标镜像名称
            target_image="${{ secrets.DOCKER_REGISTRY }}/${{ secrets.DOCKER_NAMESPACE }}/${image_basename}:${tag}"
            
            # 后台执行同步任务
            (
              if sync_image "$line" "$image_name" "$tag" "$image_basename" "$target_image"; then
                echo "$line" >> /tmp/success_images.txt
              else
                echo "$line → $target_image" >> /tmp/failed_images.txt
              fi
            ) &
            
          done < images.txt
          
          # 等待所有后台任务完成
          wait
          
          echo ""
          echo "======================================"
          echo "📈 并行任务执行完成"
          echo "======================================"
      
      - name: 清理 Docker 镜像
        if: always()
        run: |
          echo "🧹 清理 Docker 镜像缓存"
          docker system prune -af --volumes || true
          
      - name: 显示同步结果
        if: always()
        run: |
          echo ""
          echo "======================================"
          echo "📊 同步结果统计"
          echo "======================================"
          
          # 读取成功和失败的镜像列表
          success_count=0
          failed_count=0
          
          if [ -f /tmp/success_images.txt ]; then
            success_count=$(wc -l < /tmp/success_images.txt | xargs)
            echo ""
            echo "✅ 成功的数量: $success_count"
            if [ "$success_count" -gt 0 ]; then
              echo "具体成功的为："
              while IFS= read -r line; do
                echo "  ✓ $line"
              done < /tmp/success_images.txt
            fi
          else
            echo ""
            echo "✅ 成功的数量: 0"
          fi
          
          if [ -f /tmp/failed_images.txt ]; then
            failed_count=$(wc -l < /tmp/failed_images.txt | xargs)
            echo ""
            echo "❌ 失败的数量: $failed_count"
            if [ "$failed_count" -gt 0 ]; then
              echo "具体失败的为："
              while IFS= read -r line; do
                echo "  ✗ $line"
              done < /tmp/failed_images.txt
            fi
          else
            echo ""
            echo "❌ 失败的数量: 0"
          fi
          
          echo ""
          echo "======================================"
          echo "🎉 所有任务已完成"
          echo "======================================"
          
          # 如果所有镜像都失败，则退出
          if [ -f /tmp/failed_images.txt ] && [ ! -f /tmp/success_images.txt ]; then
            exit 1
          fi

